#+TITLE: Reversible Arithmetic on Collections
#+AUTHOR: The Team of Fu
#+LATEX_HEADER: \usepackage{savesym}
#+LATEX_HEADER: \savesymbol{iint}
#+LATEX_HEADER: \savesymbol{iiint}
#+LATEX_HEADER: \usepackage{amsmath}

#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usepackage{tikz-cd}
#+LATEX_HEADER: \usetikzlibrary{matrix,arrows,positioning,scopes,chains}
#+LATEX_HEADER: \tikzset{node distance=2cm, auto}
#+LATEX_HEADER: \usepackage{framed}
#+LATEX_HEADER: \usepackage[framed]{ntheorem}
#+LATEX_HEADER: \newframedtheorem{myrule}{Rule}[section]
#+LATEX_HEADER: \newframedtheorem{mydefinition}{Definition}[section]
#+BEGIN_COMMENT
The following line generates a benign error
#+LATEX_HEADER: \usepackage{amsmath, amsthm, amssymb}
#+END_COMMENT
#+STYLE: <link rel="stylesheet" type="text/css" href="styles/default.css" />
#+BEGIN_COMMENT
  TODO: Integrate BibTeX
#+END_COMMENT

+ Remark :: This is a literate program.
              [fn:LP: http://en.wikipedia.org/wiki/Literate_programming.]
              Source code /and/ PDF documentation spring
              from the same, plain-text source files.

* Introduction

  We often encounter data records or rows as hash-maps, lists, vectors
  (also called /arrays/). In our financial calculations, we often want
  to add up a collection of such things, where adding two rows means
  adding the corresponding elements and creating a new virtual row from
  the result. We also want to /un-add/ so we can undo a mistake, roll
  back a provisional result, perform a backfill or allocation: in short,
  get back the original inputs. This paper presents a library supporting
  reversible arithmetic on a large class of collections in
  Clojure.[fn::http://clojure.org]

* Mathematical Background

  Think of computer lists and vectors as /mathematical vectors/ familiar
  from linear algebra:[fn::http://en.wikipedia.org/wiki/Linear_algebra]
  ordered sequences of numerical /components/ or /elements/. Think of
  hash-maps, which are equivalent to /objects/ in object-oriented
  programming,[fn::http://en.wikipedia.org/wiki/Object-oriented_programming]
  as sparse vectors[fn::http://en.wikipedia.org/wiki/Sparse_vector] of
  /named/ elements.

  Mathematically, arithmetic on vectors is straightforward: to add
  them, just add the corresponding elements, first-with-first,
  second-with-second, and so on.  Here's an example in two dimensions:
  $$[1, 2] + [3, 4] = [4, 6]$$

  Clojure's /map/ function does mathematical vector addition straight
  out of the box on Clojure vectors and lists.  (We don't need to write
  the commas, but we can if we want -- they're just whitespace in
  Clojure):
#+BEGIN_SRC clojure :tangle no
(map + [1 2] [3 4])
#+END_SRC

#+RESULTS:
| 4 | 6 |

\begin{verbatim}
==> [4 6]
\end{verbatim}

  With Clojure hash-maps, add corresponding elements via /merge-with/:
#+BEGIN_SRC clojure :tangle no
(merge-with + {:x 1, :y 2} {:x 3, :y 4})
#+END_SRC

#+RESULTS:
| :y | 6 | :x | 4 |

\begin{verbatim}
==> {:x 4, :y 6}
\end{verbatim}

  The same idea works in any number of dimensions and with any kind of
  elements that can be added (any /mathematical
  field/:[fn::http://en.wikipedia.org/wiki/Field_(mathematics)]
  integers, complex numbers, quaternions -- many more.

  Now, suppose you want to /un-add/ the result, \verb|[4 6]|? There is
  no unique answer.  All the following are mathematically correct:
\begin{align*}
[-1, 2] + [5, 4] &= [4, 6] \\
[ 0, 2] + [4, 4] &= [4, 6] \\
[ 1, 2] + [3, 4] &= [4, 6] \\
[ 2, 2] + [2, 4] &= [4, 6] \\
[ 3, 2] + [1, 4] &= [4, 6] \\
\end{align*}
  and a large infinity of more answers.

* A Protocol for Reversible Arithmetic

  Let's define a protocol for /reversible arithmetic in vector spaces/
  that captures the desired functionality.  We want a /protocol/ --
  Clojure's word for
  /interface/,[fn::http://en.wikipedia.org/wiki/Interface_(computing)]
  because we want several implementations with the same reversible
  arithmetic: one implementation for vectors and lists, another
  implementation for hash-maps.  /Protocols/ let us ignore inessential
  differences: the protocol for reversible arithmetic is the same for
  all compatible collection
  types.[fn::including streams over time! Don't forget Rx and SRS.]

  Name our objects of interest /algebraic vectors/ to distinguish them
  from Clojure's existing /vector/ type. Borrowing an idiom from C\# and
  .NET, name our protocol with an initial /I/ and with camelback
  casing.[fn::http://en.wikipedia.org/wiki/CamelCase] Don't misread
  /IReversibleAlgebraicVector/ as ``irreversible algebraic vector;''
  rather read it as ``I Reversible Algebraic Vector'', i.e., ``Interface
  to Reversible Algebraic Vector,'' where the ``I'' abbreviates
  ``Interface.''

  We want to add, subtract, and scale our reversible vectors, just as we
  can do with mathematical vectors.  /Add/ should be multiary, because
  that's intuitive.  Multiary functions are written with ampersands
  before all the optional parameters, which Clojure will package in a
  sequence. Unfortunately, protocol functions don't support ``rest''
  arguments,[fn::http://bit.ly/18kecbJ] so we'll go with binary /add/
  for now, and built up multiarity through functional programming mojo.

  /Sub/ should be binary, because multiary sub is ambiguous.

  Include inner product, because it is likely to be useful.

  Though we don't have immediate scenarios for subtraction, scaling, and
  inner product, the mathematics tells us they're fundamental. Putting
  them in our design /now/ affords two benefits:
  1. when the need arises, we won't have to change the code
  1. their existence in the library may inspire usage scenarios

+ Remark :: The choice to include operations in a library in the absense
            of scenarios is
            philosophical,[fn::http://en.wikipedia.org/wiki/Design_philosophy]
            perhaps more akin to /Action-Centric/ design or /proactive/
            design as opposed to /Rationalist/ or /minimalist/
            design. The former philosophy promotes early inclusion of
            facilities likely to be useful or inspirational, whereas the
            latter philosophy demands ruthless rejection of facilities
            not known to be needed. Both require removing facilities
            /known to be not needed/, of course. The former philosophy
            relies on intuition, taste, judgment, and experience; and
            the latter philosophy embraces ignorance of the future as a
            design principle. We thus prefer the former.

  Finally, we need /undo/ and /redo/, the differentiating features of
  reversible algebraic vectors. Unlike object-oriented programming,
  there is no implicit /this/ instance.  Here is our protocol design:

#+NAME: reversible-algebraic-vector-protocol
#+BEGIN_SRC clojure :tangle no
(defprotocol IReversibleAlgebraicVector
  ;; binary operators
  (add   [this that])
  (sub   [this that])
  (inner [this that])
  ;; unary operators
  (scale [this scalar])
  ;; reverse any operation
  (undo [this])
  (redo [this])
)
#+END_SRC

* Implementing the Protocol

** Defining /r-vectors/ and /a-vectors/

   What things represent algebraic vectors?  Things we can operate on
   with /map/ or /merge-with/.  Therefore, they must be Clojure vectors,
   lists, or hash-maps.

   The higher-level case wraps the reversing information in a hash-map
   along with base-case algebraic vector data. The base-case data will
   belong to the /\mbox{:a-vector}/ key, by convention.


\begin{mydefinition}[Algebraic Vector (a-vector)]
   An \textbf{a-vector} is a Clojure vector, a list, or a hash-map that does not
   contain an \mbox{\texttt{:a-vector}} attribute.
\end{mydefinition}

\begin{mydefinition}[Reversible Algebraic Vector (r-vector)]
   A \textbf{reversible algebraic vector} or \textbf{r-vector} is a
   hash-map containing an \texttt{:a-vector} attribute. The value of
   that attribute must be an a-vector.
\end{mydefinition}

** Checking the Definition

   Here is a type-checking function for /a-vector/. This function is
   private to the namespace (that's what the `-' in /defn-/ means).  It
   takes a single parameter named /that/. It promotes /fluent/ or
   function-chaining style by being, semantically, the identity
   function. It either returns its input or throws an exception if
   something is wrong.

#+NAME: check-a-vector
#+BEGIN_SRC clojure :tangle no
(defn- check-a-vector [that]
  (if (or (list? that)
          (vector? that)
          (and (map? that) (not (contains? that :a-vector))))
      that ; ok -- otherwise:
      (throw (IllegalArgumentException.
        (str "; This type can't hold a-vector data: "
             (type that))))))
#+END_SRC

** Fetching /a-vector/ Data

   We need a way to get a-vector data out of any r-vector.

#+NAME: get-a-vector
#+BEGIN_SRC clojure :tangle no
(defn get-a-vector [that]
  (if (not (map? that))
      (throw (IllegalArgumentException. (str that)))
      (check-a-vector (:a-vector that))))
#+END_SRC

** Unit-Testing /get-a-vector/

   We require /IllegalArgumentExceptions/ for inputs that are not
   a-vectors and for r-vectors that contain r-vectors: our design does
   not nest r-vectors.

   Let's make test sets for data that should be accepted and rejected
   immediately.  Creating new tests is as easy as adding new instances
   to these sets.  Include some types that may not be acceptable for
   arithmetic; we are just testing structure here.

#+NAME: test-data-sets
#+BEGIN_SRC clojure :results silent :tangle no
(def ^:private atoms
  '(42 42.0 42.0M 42N 'a :a "a" \a
    #inst "2012Z"
    #{} #{0} nil true false))

(def ^:private vectors
  (concat [[]] (map vector atoms)))

(def ^:private lists
  (concat [()] (map list atoms)))

(def ^:private maps
  (concat [{}] (map (fn [a] {:a a}) atoms)))

(def ^:private a-vectors
  (concat (map (fn [a] {:a-vector a}) vectors)
          (map (fn [a] {:a-vector a}) lists)
          (map (fn [a] {:a-vector a}) maps)))

(def ^:private good-ish-test-collection
  a-vectors)

(def ^:private bad-ish-test-collection
  (concat maps
          (map (fn [a] {:a-vector a}) atoms)
          (map (fn [a] {:a-vector a}) a-vectors)))
#+END_SRC

   We cannot just /map/ or iterate /get-a-vector/ over bad inputs
   because Clojure evaluates arguments
   eagerly.[fn::http://en.wikipedia.org/wiki/Evaluation_strategy#Applicative_order]
   The first exception will terminate the entire /map/ operation, but we
   want to test that they all throw exceptions.

   One way to defeat eager evaluation is with a higher-order function.[fn::another, more complicated way is with a /macro/, which rewrites
   expressions at compile time. Macrros should be avoided when
   functional alternatives exist because they are hard to develop and
   debug.]  Pass /get-a-vector/ as a function to another function that
   wraps it in a /try/ that converts an exception into a string.
   Collect all bad-ish strings into a hash-set and test that the
   hash-set contain only the string
   ``\emph{java.lang.IllegalArgumentException}.'' For the /good-ish/
   test set, map the values into a sequence that should match the inputs
   in order.

#+name: get-a-vector-test
#+BEGIN_SRC clojure :results silent :tangle no
(defn- exception-to-name [fun expr]
  (try (fun expr)
       (catch Exception e (re-find #"[^:;,]+" (str e)))))

(defn- value-seq [fun exprs]
  (map (fn [x] (exception-to-name fun x)) exprs))

(defn- value-set [fun exprs]
  (set (value-seq fun exprs)))

(deftest get-a-vector-test
  (testing "get-a-vector"
    ;; Negative tests
    (is (= #{"java.lang.IllegalArgumentException"}
           (value-set get-a-vector bad-ish-test-collection)))
    ;; Positive tests
    (is (= (map :a-vector good-ish-test-collection)
           (value-seq get-a-vector good-ish-test-collection))) ) )
#+END_SRC

# \begin{figure}
#   \centering
#   \includegraphics[width=0.5\textwidth]{/Users/rebcabin/tmp/BB_00000.PDF}
#   \caption{\label{fig:fufortune}This means ``Fortune'' and is pronounced ``Fu''.}
# \end{figure}

** Dispatching Operations by Collection Type

   To implement the protocol, we need multimethods that dispatch on the
   collection types of the a-vectors. Lists and Clojure vectors should
   be treated the same: as sequences. Let's call them
   /seq-ish/. Hash-maps should be treated as /map-ish/. All other types
   are illegal.

#+NAME: one-type
#+BEGIN_SRC clojure :tangle no :results silent
(defn one-type [a]
  (cond
    (or (vector? a) (list? a)) 'seq-ish
    (map? a)                   'map-ish
    :default (throw (IllegalArgumentException. (str a)))))
#+END_SRC

   To dispatch on collection type, test the types of all inputs. Here we
   see ampersands before a parameter that represents a sequence of all
   optional arguments.

#+NAME: add-a-vectors
#+BEGIN_SRC clojure :tangle no
(defn- all-types [& exprs] (set (map one-type exprs)))
(defmulti  add-a-vectors all-types)
(defmethod add-a-vectors #{'seq-ish} [& those]
  (apply map + those))
(defmethod add-a-vectors #{'map-ish} [& those]
  (apply merge-with + those))
(defmethod add-a-vectors :default    [& those]
  (throw (IllegalArgumentException.
    (str "; Illegal type combination: " (map type those)))))
#+END_SRC

   At this point, it is worth noting that /static typing/ -- types
   tested by a compiler -- would save us the work of writing run-time
   type tests, but at the expense of the build-time and run-time
   complexity of introducing another language into our data-processing
   pipeline. This complexity tradeoff -- coding versus building and
   running -- is a judgment call.  We stick with dynamic type-checking,
   the only option available in Clojure, for now.

   Our /add-a-vectors/ function is loose: it will add one or more
   a-vectors, where our protocol will only accept two or more. This is
   fine: it only means that we unit test a few more cases for
   /add-a-vectors/ than for our protocol.

   Regarding the underlying arithmetic: if we attempt to add values that
   cannot be added via the $+$ operator, we do not interfere with the
   underlying exceptions that Clojure and Java may throw. Therefore, we
   do not need to test such cases here.

#+NAME: add-a-vectors-test
#+BEGIN_SRC clojure :tangle no
(deftest add-a-vectors-test
  (testing "add-a-vectors")
  (is (= #{"java.lang.IllegalArgumentException"}
         (value-set add-a-vectors atoms)))
  (are [expr] (thrown? java.lang.IllegalArgumentException expr)
       (add-a-vectors '()  {})
       (add-a-vectors  []  {})
       (add-a-vectors  {} '())
       (add-a-vectors  {}  [])
       (add-a-vectors))
  (are [x y] (= x y)
    (add-a-vectors [])    []
    (add-a-vectors [1])   [1]
    (add-a-vectors [1 1]) [1 1]

    (add-a-vectors '())    '()
    (add-a-vectors '(1))   '(1)
    (add-a-vectors '(1 1)) '(1 1)

    (add-a-vectors [1]   [2])   [3]
    (add-a-vectors [1 2] [3 4]) [4 6]

    (add-a-vectors '(1)   '(2))   '(3)
    (add-a-vectors '(1 2) '(3 4)) '(4 6)

    (add-a-vectors '(1)   [2])   [3]
    (add-a-vectors '(1 2) [3 4]) [4 6]

    (add-a-vectors [1]   '(2))   [3]
    (add-a-vectors [1 2] '(3 4)) [4 6]

    (add-a-vectors [1]   [2])   '(3)
    (add-a-vectors [1 2] [3 4]) '(4 6)

    (add-a-vectors '(1)   [2])   '(3)
    (add-a-vectors '(1 2) [3 4]) '(4 6)

    (add-a-vectors [1]   '(2))   '(3)
    (add-a-vectors [1 2] '(3 4)) '(4 6)

    (add-a-vectors [1]   [2 3])   [3]
    (add-a-vectors [1 2] [3 4 5]) [4 6]

    (add-a-vectors {})          {}

    (add-a-vectors {:a 1})      {:a 1}
    (add-a-vectors {:a 1 :b 2}) {:a 1 :b 2}

    (add-a-vectors {:a 1} {})      {:a 1}
    (add-a-vectors {:a 1 :b 2} {}) {:a 1 :b 2}

    (add-a-vectors {} {:a 1})      {:a 1}
    (add-a-vectors {} {:a 1 :b 2}) {:a 1 :b 2}

    (add-a-vectors {} {:a 1})      {:a 1}
    (add-a-vectors {} {:a 1 :b 2}) {:a 1 :b 2}

    (add-a-vectors {} {:a 1} {})      {:a 1}
    (add-a-vectors {} {:a 1 :b 2} {}) {:a 1 :b 2}

    (add-a-vectors {:a 1} {:a 2})           {:a 3}
    (add-a-vectors {:a 1 :b 2} {:a 3 :b 4}) {:a 4 :b 6}

    (add-a-vectors {:a 1} {:b 2})           {:a 1 :b 2}
    (add-a-vectors {:a 1 :b 2} {:a 3 :c 4}) {:a 4 :b 2 :c 4}
  ) )
#+END_SRC

** The ReversibleVector Type

   We now have enough to implement the /add/ method of the protocol.

#+NAME: reversible-algebraic-vector
#+BEGIN_SRC clojure :tangle no
(defrecord ReversibleVector [my-r-vector]
  IReversibleAlgebraicVector
  (add   [this that]
         (let [prior-a-vectors
               [(get-a-vector (.my-r-vector this))
                (get-a-vector (.my-r-vector that))]]
           (->ReversibleVector
             {:priors    [this that]
              :operation 'add
              :a-vector  (apply add-a-vectors prior-a-vectors)})))
  (sub   [this that] nil)
  (inner [this that] nil)
  (scale [this scalar] nil)
  (undo  [this] nil)
  (redo  [this] nil))
#+END_SRC

#+BEGIN_SRC clojure :noweb yes :mkdirp yes :tangle ./ex1/project.clj :exports none
(defproject ex1 "0.1.0-SNAPSHOT"
  :description "Project Fortune's Excel Processor"
  :url "http://example.com/TODO"
  :license {:name "TODO"
            :url "TODO"}
  :dependencies [[org.clojure/clojure  "1.5.1"]
                ]
  :repl-options {:init-ns ex1.core})
#+END_SRC
#+BEGIN_SRC markdown :mkdirp yes :tangle ./ex1/doc/intro.md :exports none
# Reversible Arithmetic on Collections
TODO: The project documentation is the .org file that produced
this output, but it still pays to read
http://jacobian.org/writing/great-documentation/what-to-write/
#+END_SRC
#+name: top-level-load-block
#+BEGIN_SRC clojure :exports none :mkdirp yes :tangle ./ex1/src/ex1/core.clj :padline no :results silent :noweb yes
<<main-namespace>>
<<reversible-algebraic-vector-protocol>>
<<check-a-vector>>
<<get-a-vector>>
<<one-type>>
<<add-a-vectors>>
<<reversible-algebraic-vector>>
#+END_SRC

#+name: main-namespace
#+BEGIN_SRC clojure :results silent :exports none
(ns ex1.core)
#+END_SRC


* Unit-Tests

#+BEGIN_SRC clojure :exports none :mkdirp yes :tangle ./ex1/test/ex1/core_test.clj :padline no :results silent :noweb yes
<<test-namespace>>
<<test-data-sets>>
<<get-a-vector-test>>
<<add-a-vectors-test>>
#+END_SRC

#+name: test-namespace
#+BEGIN_SRC clojure :results silent
(ns ex1.core-test
  (:require [clojure.test :refer :all]
            [ex1.core     :refer :all]))
#+END_SRC

* REPLing
\label{sec:emacs-repl}
To run the REPL for interactive programming and testing in org-mode,
take the following steps:
1. Set up emacs and nRepl (TODO: explain; automate)
2. Edit your init.el file as follows (TODO: details)
3. Start nRepl while visiting the actual |project-clj| file.
4. Run code in the org-mode buffer with \verb|C-c C-c|; results of
   evaluation are placed right in the buffer for inspection; they are
   not copied out to the PDF file.
